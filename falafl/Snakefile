import random
from itertools import combinations
import itertools

configfile: "config.yaml"
OUTDIR = config['OUTDIR'].format(config['p'],config['q'],config['k'],)
INDIR = config['INDIR']
REPEAT = config['REPEAT']


def gen_patient_list():

    # left1,left2 = sorted(random.sample(config['PATIENTS']['LEFT'].split(' '),2))
    # right = random.choice(config['PATIENTS']['RIGHT'].split(' '))
    # rectum = random.choice(config['PATIENTS']['RECTUM'].split(' '))
    # patient_list = [left1,left2, right, rectum]
    # print(patient_list)
    # return patient_list
    left = sorted(combinations(list(config['PATIENTS']['LEFT']),2))
    right = list(config['PATIENTS']['RIGHT'])
    rectum = list(config['PATIENTS']['RECTUM'])
    all_combo = list(itertools.product(*[left,right,rectum]))
    all_combo_clean  = [(p1,p2,p3,p4) for [(p1,p2),p3,p4] in all_combo]

    return all_combo_clean

PATIENT_LISTS = gen_patient_list()




#PATIENT_LISTS=list(config['PATIENT_LIST'])
#patient_list = PATIENT_LISTS
def gen_input_file_list(patient_list):
    print(patient_list)

    return [INDIR.format(p) for p in patient_list]


def gen_preprocess_output(patient_list):
    output_frac = OUTDIR+"%s_input_frac.npz" % '_'.join(map(str, patient_list))
    output_bin = OUTDIR+"%s_input_bin.npz" % '_'.join(map(str, patient_list))
    
    return output_frac, output_bin

def gen_falafl_output(patient_list):
    #print(PATIENT_LISTS)
    return [OUTDIR+"%s_falafl_output.npz" % '_'.join(map(str, p_list)) for p_list in patient_list]


#for i in range(REPEAT):
patient_list = gen_patient_list()

rule all: 
    input:
        expand(gen_falafl_output(patient_list),patient_list=PATIENT_LISTS)

# rule process:
#     input: 
#         expand(gen_input_file_list(patient_list),patient_list=PATIENT_LISTS)

#     output:
#         frac = gen_preprocess_output(patient_list)[0],
#         bin = gen_preprocess_output(patient_list)[1]
        
#     params:
#         p = config['p'],
#         k = config['k']
#     threads: 
#         2
#     shell:
#         "python preprocess.py " \
#         "-i {input} " \
#         "-of {output.frac} " \
#         "-ob {output.bin} " \
#         "-p {params.p} " \
#         "-k {params.k} "



rule falafl:
    input:
        expand(gen_input_file_list(patient_list),patient_list=PATIENT_LISTS)
        # frac = gen_preprocess_output(patient_list)[0],
        # bin = gen_preprocess_output(patient_list)[1]
    output:
        #gen_falafl_output(patient_list)
        expand(gen_falafl_output(patient_list),patient_list=PATIENT_LISTS)

    params:
        q = config['q'],
        run_time = config['RUN_TIME']
    threads: 
        2
    shell:
        "python falafl.py " \
        "-ib {input.bin} " \
        "-if {input.frac} " \
        "-o {output} " \
        "-q {params.q} " \
        "-c {threads} " \
        "-t {params.run_time}"
 
        